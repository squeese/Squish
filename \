local Create = select(2, ...).Create
local Driver = select(2, ...).Driver
local Stream = select(2, ...).Stream

local Test = Stream
  .create(function(next, send, ctx)
    for i = 1, 10 do
      send(i)
    end
  end)
  :map(function(ctx, value)
    return ctx * value
  end)

local total, result, before, after = 0
C_Timer.After(1, function()
  local function sum(v)
    total = total + v
  end
  collectgarbage("collect")
  before = collectgarbage("count")
  do
    for i = 1, 100 do
      Test:subscribe(sum, 1)
    end
  end
  collectgarbage("collect")
  after = collectgarbage("count")
  result = after - before
end)
C_Timer.After(3, function()
  print("total", total)
  print("before", before, "after", after, "result", result)
end)









local function tmp()
  local Render = Create()

  local SetStatic = Driver{
    acquire = Driver.opaque,
    render = function(self, container, name, ...)
      container.frame[name](container.frame, ...)
    end,
  }

  local Set = Driver{
    mount = function(self, container, parent)
      container.frame = parent.frame
    end,
    render = function(self, container, ...)
      local frame = container.frame
      local name = container.key
      frame[name](frame, ...)
    end,
    remove = function(self, container)
      container.frame = nil
    end,
  }

  --Set.__call = function(driver, key, ...)
    --return Driver.__call(Static, key, key, ...)
  --end

  local function upgrade(self)
    for index, child in ipairs(self) do
      if type(child) == "table" and getmetatable(child) == nil then
        child.key = table.remove(child, 1)
        Set(child)
      end
    end
  end

  local function mount(self, container, parent)
    container.frame = self.pool:Acquire()
    container.frame:SetParent(parent.frame or UIParent)
    container.frame:ClearAllPoints()
    container.frame:Show()
  end

  local function remove(self, container)
    self.pool:Release(container.frame)
    container.frame = nil
  end

  local backdrop = {
    bgFile = 'Interface\\Addons\\Squish\\media\\backdrop.tga',
    edgeFile = 'Interface\\Addons\\Squish\\media\\edgefile.tga',
    insets   = { left = 1, right = 1, top = 1, bottom = 1 },
    edgeSize = 1
  }

  local Frame = Driver{
    pool = CreateFramePool("frame", UIParent, nil, nil),
    name = "Frame",
    mount = mount,
    remove = remove,
    upgrade = upgrade,
  }

  local Button = Driver{
    pool = CreateFramePool("button", UIParent, 'UIPanelButtonTemplate', nil),
    name = "Button",
    mount = mount,
    remove = remove,
    upgrade = upgrade,
  }

  local Text = Driver{
    pool = CreateFontStringPool(UIParent, nil, nil, 'GameFontNormal'),
    name = "Text",
    mount = mount,
    remove = remove,
    upgrade = upgrade,
  }

  local Texture = Driver{
    pool = CreateTexturePool(UIParent, nil, nil, nil),
    name = "Texture",
    mount = mount,
    remove = remove,
    upgrade = upgrade,
    --render = function(self, container, icon)
      --container.frame:SetAllPoints()
      --container.frame:SetTexCoord(0, 1, 0, 1)
      --container.frame:SetDrawLayer("BACKGROUND")
      --container.frame:SetTexture(icon)
    --end,
  }

  local Iterator
  local Range
  do
    local tmp = {}
    Iterator = Driver{
      acquire = Driver.opaque,
      render = function(self, container, fn)
        local i = 0
        repeat
          i = i + 1
          tmp[i] = fn(i)
        until not tmp[i]
        return unpack(tmp, 1, i-1)
      end
    }
    Range = Driver{
      acquire = Driver.opaque,
      render = function(self, container, b, e, fn)
        for i = 1, 100 do
          tmp[i] = nil
        end
        for i = b, e do
          tmp[i] = fn(i)
        end
        return unpack(tmp, b, e)
      end
    }
  end

  --local function testAppClean()
    --Render(Frame{
      --{"SetPoint", "CENTER", 0, 0},
      --{"SetSize", 100, 310},
      --{"SetBackdrop", backdrop},
      --{"SetBackdropColor", 0, 0, 0, 0.5},
      --{"SetBackdropBorderColor", 0, 0, 0, 0.8},
      --Button{
        --{"SetPoint", "TOP", 0, 30},
        --{"SetText", "X"},
        --{"SetScript", "OnClick", function()
          --Render()
        --end},
      --},
      --Text{{"SetPoint", "TOP", 0, -20}, {"SetText", "Hello"}},
      --Text{{"SetPoint", "TOP", 0, -40}, {"SetText", "Hello"}},
      --Text{{"SetPoint", "TOP", 0, -60}, {"SetText", "Hello"}},
      --Text{{"SetPoint", "TOP", 0, -80}, {"SetText", "Hello"}},
      --Text{{"SetPoint", "TOP", 0, -100}, {"SetText", "Hello"}},
      --Text{{"SetPoint", "TOP", 0, -120}, {"SetText", "Hello"}},
      --Text{{"SetPoint", "TOP", 0, -140}, {"SetText", "Hello"}},
      --Text{{"SetPoint", "TOP", 0, -160}, {"SetText", "Hello"}},
      --Text{{"SetPoint", "TOP", 0, -180}, {"SetText", "Hello"}},
      --Text{{"SetPoint", "TOP", 0, -200}, {"SetText", "Hello"}},
      --Text{{"SetPoint", "TOP", 0, -220}, {"SetText", "Hello"}},
      --Text{{"SetPoint", "TOP", 0, -240}, {"SetText", "Hello"}},
      --Text{{"SetPoint", "TOP", 0, -260}, {"SetText", "Hello"}},
      --Text{{"SetPoint", "TOP", 0, -280}, {"SetText", "Hello"}},
    --})
  --end
  --testAppClean()




  local function testApp()
    local app
    local count = 0
    local function report(fn)
      collectgarbage("collect")
      local before = collectgarbage("count")
      fn()
      local change = collectgarbage("count") - before
      collectgarbage("collect")
      local after = collectgarbage("count")
      -- print("Before", before, "After", after, "Change", change)
    end
    local function dec()
      report(function()
        repeat
          count = math.max(0, count - 1)
          Render(app)
        until count == 0
      end)
    end
    local function inc()
      report(function()
        repeat
          count = math.min(count + 1, 6)
          Render(app)
        until count == 6
      end)
    end

    local Butt = Button(function(self)
      return
        Set("SetPoint", self.point, 0, 0),
        Set("SetText", self.text),
        Set("SetScript", "OnClick", self.onClick)
    end)

    local TApp = Frame{
      {"SetPoint", "CENTER", 0, 100},
      {"SetSize", 100, 100},
      {"SetBackdrop", backdrop},
      {"SetBackdropColor", 0, 0, 0, 0.5},
      {"SetBackdropBorderColor", 0, 0, 0, 0.8},
      Butt{ point="TOPLEFT", text="-", onClick=dec },
      Butt{ point="TOPRIGHT", text="+", onClick=inc },
      --Button{
        --{"SetPoint", "TOPLEFT", 0, 0},
        --{"SetText", "-"},
        --{"SetScript", "OnClick", dec},
      --},
      --Button{
        --{"SetPoint", "TOPRIGHT", 0, 0},
        --{"SetText", "+"},
        --{"SetScript", "OnClick", inc},
      --},
      Iterator{function(i)
        if i <= count then
          return Text(nil
            , Set("SetPoint", "TOP", 0, -i*10)
            , Set("SetText", i))
        end
      end},
    }

    local FApp = Driver(function(self, container, ...)
      return Frame(nil
        , Set("SetPoint", "CENTER", 0, 100)
        , Set("SetSize", 100, 100)
        , Set("SetBackdrop", backdrop)
        , Set("SetBackdropColor", 0, 0, 0, 0.5)
        , Set("SetBackdropBorderColor", 0, 0, 0, 0.8)
        , Button(nil
          , Set("SetPoint", "TOPLEFT", 0, 0)
          , Set("SetText", "-")
          , Set("SetScript", "OnClick", dec))
        , Button(nil
          , Set("SetPoint", "TOPRIGHT", 0, 0)
          , Set("SetText", "+")
          , Set("SetScript", "OnClick", inc))
        , Range(nil, 1, count, function(i)
          return Text(nil
            , Set("SetPoint", "TOP", 0, -i*10)
            , Set("SetText", i))
          end))

    end)

    app = FApp
    Render(app)
  end
end
