#!/usr/bin/env node
/*jshint node:true*/
/*globals console:true */
'use strict';

var Benchmark = require('benchmark')
  , luaparse = require('../')
  , fs = require('fs')
  , path = require('path')
  , files = process.argv.slice(2)
  , suites = {}
  , suite = new Benchmark.Suite()
  , verbose = false
  , minSamples = 5
  , minTime = 0;

files.forEach(function(file) {
  if (/^-v|--verbose/.test(file)) return verbose = true;
  if (/^--samples=/.test(file)) {
    minSamples = file.replace(/^--samples=/, '');
    return;
  }
  if (/^--minTime=/.test(file)) {
    minTime = file.replace(/^--minTime=/, '');
    return;
  }
  if (/^--luaparse=/.test(file)) {
    luaparse = require(file.replace(/^--luaparse=/, ''));
    return;
  }

  if (!fs.existsSync(file)) suites[path.basename(file)] = file;
  else suites[file] = fs.readFileSync(file, 'utf8');
});

if (!files.length || !Object.keys(suites).length) {
  console.log("Usage:\n\tbenchmark [snippet|file]...");
  console.log("Flags:\n\t-v|--verbose\n\t--samples=\n\t--minTime=");
  process.exit(1);
}

Object.keys(suites).forEach(function(file) {
  var source = suites[file]
    , settingsSets = {
      'defaults': { },
      'scope: true': { scope: true },
      'comments: false': { comments: false },
      'locations: true': { locations: true }
    };

  Object.keys(settingsSets).forEach(function(set) {
    suite.add(file + ' ' + set, function() {
      luaparse.parse(source, settingsSets[set]);
    }, { minSamples: minSamples, minTime: minTime });
  });
});

suite.on('cycle', function(event) {
  var stats = event.target.stats
    , mean = (stats.mean * 1000).toFixed(4)
    , variance = (stats.variance * 1000 * 1000).toFixed(4);

  if (verbose) console.log(String(event.target) + ' (' + mean + 'ms)');
  else console.log(mean + '\t' + variance);
});
suite.run();

/* vim: set sw=2 ts=2 et tw=80 ft=javascript : */
